[{"content":"If you\u0026rsquo;re working with a large multi-tenancy organisation it\u0026rsquo;s possible the subscription your Databricks resource sits in is a different tenancy to the Azure DevOps hosting your repositories. This blog explains how to connect Databricks to a DevOps repository in that scenario.\nWhen trying to connect to DevOps in a seperate tenancy, you\u0026rsquo;ll receive the message Unable to parse credentials from Azure Active Directory account. Ensure Azure Devops account is connected to AAD. if you haven\u0026rsquo;t configured a Personal Access Token (PAT).\n  Go to dev.azure.com and login to the DevOps organisation containing the repository you\u0026rsquo;re trying to connect Databricks to.\n  Click the User Settings icon in the top right and go to Personal Access Tokens.\n  Click + New Token\n  Fill in the Create a new personal access token form:\n Give the token a sensible name, such as \u0026lsquo;Databricks Repo Token\u0026rsquo; Select the appropriate organisation Set the expiration as required The scope required \u0026lsquo;Full access\u0026rsquo; Press Create    Copy the access token displayed.\n  Go to your Databricks workspace.\n  Click the workspace name in the top right and choose User Settings\n  Go to the Git Intergration tab at the top of the page.\n  Change the drop down to Azure DevOps Services (personal access token)\n  Populate the Git provider username or email address with the email address you use to log in to the DevOps organisation.\n  Paste the token copied in step 5 into the Token box and press save.\n  With that configured, you can now go back to Repos, select Add Repo, and clone the remote Git repo.\n","date":"2021-09-01T00:00:00Z","image":"https://www.zachstagers.co.uk/p/connect-azure-databricks-to-a-devops-repo-in-a-different-tenancy/banner_databricks_devops_access_token.JPG","permalink":"https://www.zachstagers.co.uk/p/connect-azure-databricks-to-a-devops-repo-in-a-different-tenancy/","title":"Connect Azure Databricks to a DevOps repo in a different tenancy"},{"content":"Introduction to ACL\u0026rsquo;s Access Control Lists (ACLs) offer low-level control of access to the folders within your Azure Data Lake, whilst Role-Based Access Control (RBAC) offers high-level control to the entire lake.\n\rRBAC vs ACL\r\nThe ACL permissions on offer are:\n Read - Grants read access to files and folders (i.e. able to see the contents). Write - Grants write access to files and folders. Execute - Grants\u0026hellip; execute. What this actually means is the user is able to navigate through the folder. A user must have execute assigned to the entire hierarchy above the folder they have read and/or write access to. Whilst in the portal you can assign this to files, it doesn\u0026rsquo;t do anything.  As well as setting access explicitly to a folder, defaults can be set at any level to inherit permissions to newly created sub folders and files, but note that these do not apply to folders and files which already exist.\nBelow is a visualisation of a simple folder structure with the minimum ACL\u0026rsquo;s required at each level to read data from \u0026ldquo;File 1\u0026rdquo;, whilst granting no access to \u0026ldquo;File 2\u0026rdquo;. Although this depicts the minimum permissions required to get to a single file, in reality you\u0026rsquo;d likely elevate the Read permission to \u0026ldquo;Sub Folder 1\u0026rdquo; as a default permission, therefore allowing it to inherit down to all files and folders listed underneath it.\n\rData Lake ACL Example\r\nTesting ACL\u0026rsquo;s There are a few things to be mindful of when testing with ACL\u0026rsquo;s:\n Folder names are case sensitive. You need to connect to the lake using the Data Lake Storage end point - https://\u0026lt;lakename\u0026gt;.dfs.core.windows.net/\u0026lt;container\u0026gt;/\u0026lt;folders\u0026gt; If testing via storage explorer, connect to the lake using the \u0026lsquo;ADLS Gen2 container or directory\u0026rsquo; option.  The Mask ACL When managing ACL\u0026rsquo;s, there\u0026rsquo;s a button to Add principal, which allows you to select and add a user or group to assign ACL permissions to. There\u0026rsquo;s also a button to Add mask, and this defines an override of the effective permissions for named users and groups.\nIn the below screenshot, I\u0026rsquo;ve added a mask and removed all permissions. Next to my Zach Stagers named user with Execute permissions you see a warning symbol. If you hover over the warning, it\u0026rsquo;ll say \u0026ldquo;The following access permissions are beyond the bounds of the mask: Execute\u0026rdquo;. This is just highlighting to you that although Zach Stagers has Execute, it won\u0026rsquo;t be effective because the Mask has disabled Execute permissions for all users.\n\rManage ACL Screen with a mask applied\r\nYou might use this in scenarios where someone has put something sensitive or something they shouldn\u0026rsquo;t in a folder in the lake and you want an admin to be able to go in and remove it whilst restricting access for everyone else. This is a much easier method than removing all of your assigned ACL\u0026rsquo;s and then having to readd them.\n","date":"2021-08-13T00:00:00Z","image":"https://www.zachstagers.co.uk/p/azure-data-lake-acl-introduction/banner_azure_datalake_acl.JPG","permalink":"https://www.zachstagers.co.uk/p/azure-data-lake-acl-introduction/","title":"Azure Data Lake ACL Introduction"}]